\documentclass[a4paper,12pt]{article}
\usepackage{mathtools,amsfonts,amssymb,amsmath, bm,commath,multicol}
\usepackage{algorithmicx, tkz-graph, algorithm, fancyhdr, pgfplots}
\usepackage{fancyvrb}

\usepackage[noend]{algpseudocode}


\pagestyle{fancy}
\fancyhf{}
\rhead{21/2/2017 ::: Group yadadya}
\lhead{Pricing Financial Derivative ::: Problemset 2}
\rfoot{\thepage}


\DefineVerbatimEnvironment{juliaout}{Verbatim}{}
\DefineVerbatimEnvironment{juliacode}{Verbatim}{fontshape=sl, fontsize=\tiny}
\DefineVerbatimEnvironment{juliaterm}{Verbatim}{}


\begin{document}

\section*{Exxercise 1}

\subsection*{Solution}

Tha solution:
%
\begin{align*}
S_t &= e^{\sigma W_t + (\mu - \frac{\sigma^2}{2})t} \\
S_t &= e^{\frac{3}{2}W_t + \frac{7}{8}t}
\end{align*}

\subsection*{Code}
<<>>=
using Distributions
using DataFrames
using Gadfly
using Base.Test

#######################################
# Basic Brownian Motion Functions
#######################################
function make_walk(steps::AbstractArray{Float64,1}, start = 0.0)
    reduce((a,b) -> append!(a, a[end] + b), [start], steps)
end

make_time(N, T) = range(0, T/N, N)
brownian(N, T, start = 0.0) = make_walk(rand(Normal(0, sqrt(T/N)), N-1), start)

# Helper to cover the normal distributions from a brownian motion
get_steps(B) = [B[i] - B[i-1] for i in 2:length(B)]

geom(w, mu, sigma, t) = exp(sigma*w + (mu - sigma^2/2)*t)
geometric(brownian, time, mu, sigma) = [geom(b,mu,sigma,t) for (b,t) in zip(brownian, time)]


#######################################
# Eulers Method
#######################################

function eulers_method(B, N, T, a_fn, b_fn, start = 1.0)
    d = T/N
    W = get_steps(B)
    fn(x,w,t) = x + a_fn(t, x)*d + b_fn(t, x)*w
    reduce((a,i) -> append!(a, fn(a[end], W[i], i)), [start], 1:length(W))
end

@testset "eulers method" begin
    fn(t,x) = x*t
    @test eulers_method([0,1,2], 1, 1, fn, fn) == [1,3,15]
    @test eulers_method([0,1,2], 1, 1, fn, fn, 2) == [2,6,30]
    @test eulers_method([0,1,2], 2, 1, fn, fn) == [1,2.5,10]
    @test eulers_method([0,1,2], 4, 2, fn, fn) == [1,2.5,10]
end


#######################################
# Exercise #1
#######################################

function geometric_euler(B, N, T, mu, sigma, start)
    a_fn(t, x) = mu*x
    b_fn(t, x) = sigma*x
    eulers_method(B, N, T, a_fn, b_fn, start)
end

function plot_em(N, T, mu = 2, sigma = 1.5, start = 1.0)
    time = make_time(N, T)
    B = brownian(N, T)
    d = DataFrame(path = geometric(B, time, mu, sigma),
                  euler = geometric_euler(B, N, T, mu, sigma, start),
                  time = time)
    plot(stack(d, [:euler, :path]), x = "time", y = "value", color = "variable", Geom.line)
end
@

\subsection*{Plot for N = 100, T = 1}
<<echo=false>>=
plot_em(100,1)
@

\subsection*{Plot for N = 250, T = 1}
<<echo=false>>=
plot_em(250,1)
@

\subsection*{Plot for N = 1000, T = 1}
<<echo=false>>=
plot_em(1000,1)
@

\section*{Exercise 2}

\subsection*{Solution}

\begin{align*}
Y_t &= e^{at}X_t \\
\frac{d}{dt}Y_t &= ae^{at}X_t + e^{at}\frac{dX_t}{dt} + \frac{1}{2}*0 \\
dY_t &= ae^{at}X_tdt + e^{at}dX_t \\
dY_t &= ae^{at}X_tdt + e^{at}( a(m - X_t)dt + \sigma dB_t) \\
dY_t &= ae^{at}X_tdt + ame^{at}dt - ae^{at}X_tdt + e^{at} \sigma dB_t \\
dY_t &= ame^{at}dt + e^{at} \sigma dB_t \\
\int_o^t dY_sds &= \int_0^t ame^{as}ds + \int_0^t e^{as} \sigma dB_s \\
Y_t - Y_o &= \frac{1}{a} ame^{at} - \frac{1}{a}ame^{a*0} + \int_0^t e^{as} \sigma dB_s \\
e^{at}X_t - X_0 &= me^{at} - me^{0} + \int_0^t e^{as} \sigma dB_s \\
X_t &= X_0e^{-at} + me^{at}e^{-at} - me^{-at} + e^{-at}\sigma \int_0^t e^{as} dB_s \\
X_t &= m - (X_0 - m)e^{-at} + e^{-at}\sigma \int_0^t e^{as} dB_s \\
\end{align*}

\subsection*{code}
<<>>=
function plot_vasicek(N, T, mu, sigma, a, start = 1.0)
    B = brownian(N, T)
    a_fn(t, x) = a*(mu - x)
    b_fn(t, x) = sigma
    euler = eulers_method(B, N, T, a_fn, b_fn, start)
    plot(x = make_time(N, T), y = euler, Geom.line)
end
@

\subsection*{Plot for mu = 0, sigma = 1, a = 10, x_0 = 5}
<<echo=false>>=
plot_vasicek(1000, 5, 0, 1, 10, 5.0)
@

\subsection*{Plot for mu = 0, sigma = 10, a = 100, x_0 = 5}
<<echo=false>>=
plot_vasicek(1000, 5, 0, 10, 100, 5.0)
@

\end{document}