asian_value(S, 1.1, 1000, 1)
asian_value(S, 1.15, 1000, 1)
cum_avg(S)
asian_value(S, 1.13, 1000, 1)
cum_avg(S)
asian_value(S, 1.13, 1000, 1)
cum_avg(S)
asian_value(S, 1.13, 1000, 1)
cum_avg(S)
asian_value(S, 1.13, 1000, 1)
asian_value(S, 1.13, 1000, 1)
plot(randn(100))
using Gadfly
plot(randn(100))
plot(randn(100), Geom.histogram)
plot(x = randn(100), Geom.histogram)
plot(x = randn(1000), Geom.histogram)
plot(x = randn(10000), Geom.histogram)
plot(x = [mean(randn(100)) for i in 1:100], Geom.histogram)
plot(x = [mean(randn(100)) for i in 1:1000], Geom.histogram)
plot(x = [mean(randn(10)) for i in 1:1000], Geom.histogram)
plot(x = [mean(randn(1000)) for i in 1:1000], Geom.histogram)
sd([mean(randn(1000)) for i in 1:1000], Geom.histogram))
sd([mean(randn(1000)) for i in 1:1000])
var([mean(randn(1000)) for i in 1:1000])
var([mean(randn(100)) for i in 1:1000])
var([mean(randn(10)) for i in 1:1000])
var([mean(randn(50)) for i in 1:1000])
var([mean(randn(1000)) for i in 1:1000])
var([mean(rand(Normal(0, 2), 1000)) for i in 1:1000])
plot(x = brownian(1000, 1), Geom.histogram)
plot(x = brownian(10000, 1), Geom.histogram)
plot(x = brownian(10000, 1), Geom.histogram)
plot(x = brownian(10000, 1), Geom.histogram)
plot(x = brownian(1000, 1), Geom.histogram)
MvNormal
MvNormal(0, 1)
plot(x = rand(MvNormal(0, 1), 1000, Geom.histogram)
?MvNormal
MvNormal
plot(x = brownian(10000, 1), Geom.histogram)
plot(x = brownian(10000, 1), Geom.histogram)
plot(x = brownian(10000, 1), Geom.histogram)
plot(x = brownian(10000, 1), Geom.histogram)
plot(x = make_time(10000, 1), y = brownian(10000, 1), Geom.histogram)
plot(x = make_time(10000, 1), y = brownian(10000, 1), Geom.line)
MvNormal(zeros(10), 1)
rand(MvNormal(zeros(10000), 1))
plot(x = rand(MvNormal(zeros(10000), 1)), Geom.histogram)
plot(x = rand(MvNormal(zeros(10000), 1)), Geom.histogram)
plot(x = rand(MvNormal(zeros(10000), 1)), Geom.histogram)
brownian(100, 1)[end]
plot(x = [brownian(100, 1)[end] for i in 1:1000], Geom.histogram)
plot(x = [brownian(100, 1)[end] for i in 1:5000], Geom.histogram)
plot(x = [brownian(100, 1)[end] for i in 1:5000], Geom.histogram)
plot(x = rand(MvNormal(zeros(10000), 1)), Geom.histogram)
plot(x = [mean(brownian(100, 1)) for i in 1:5000], Geom.histogram)
plot(x = [mean(brownian(100, 1)) for i in 1:5000], Geom.histogram)
plot(x = [mean(brownian(500, 1)) for i in 1:5000], Geom.histogram)
plot(x = [mean(brownian(5000, 1)) for i in 1:5000], Geom.histogram)
plot(x = [mean(brownian(5000, 2)) for i in 1:5000], Geom.histogram)
plot(x = [mean(brownian(5000, 4)) for i in 1:5000], Geom.histogram)
plot(x = rand(Normal(0, 4), 5000), Geom.histogram)
plot(x = rand(Normal(0, 4/2), 5000), Geom.histogram)
plot(x = rand(Normal(0, 4/4), 5000), Geom.histogram)
plot(x = rand(Normal(0, 4/2), 5000), Geom.histogram)
plot(x = rand(Normal(0, 4/4), 5000), Geom.histogram)
plot(x = [mean(brownian(5000, 4)) for i in 1:5000], Geom.histogram)
plot(x = rand(Normal(0, 4/(2*pi)), 5000), Geom.histogram)
plot(x = rand(Normal(0, 4/(pi)), 5000), Geom.histogram)
plot(x = rand(Normal(0, 4/(pi)), 5000), Geom.histogram)
plot(x = rand(Normal(0, 4/3), 5000), Geom.histogram)
plot(x = rand(Normal(0, 12/3), 10000), Geom.histogram)
plot(x = [mean(brownian(5000, 12)) for i in 1:5000], Geom.histogram)
var([mean(brownian(5000, 4)) for i in 1:5000])
var([mean(brownian(5000, 6)) for i in 1:5000])
var([mean(brownian(5000, 12)) for i in 1:5000])
var([mean(brownian(5000, 20)) for i in 1:5000])
var([mean(brownian(5000, 21)) for i in 1:5000])
var([mean(brownian(5000, 21)) for i in 1:5000])
plot(x = [mean(brownian(5000, 12)) for i in 1:5000], Geom.histogram)
plot(x = rand(Normal(0, sqrt(12/3)), 10000), Geom.histogram)
asian_value(S, 1.15, 1000, 1)
asian_value(S, 1, 1000, 1)
asian_value(S, .2, 1000, 1)
asian_value(S, .01, 1000, 1)
asian_value(S, 1.2, 1000, 1)
asian_value(S, 1.5, 1000, 1)
asian_value(S, 1.5, 1000, 1)
asian_value(S, 1.5, 1000, 1)
asian_value(S, 1.5, 1000, 1)
asian_value(S, 1.5, 1000, 1)
asian_value(S, 1.4, 1000, 1)
asian_value(S, 1.2, 1000, 1)
asian_value(S, .2, 1000, 1)
asian_value(S, .25, 1000, 1)
brownian(100, 1)
brownian(100, 1) - 4
make_time(T, N)
make_path(.03, 2, 1, 1000, 1)
make_path(.03, 2, 1, 1000, 1)
make_path(.03, 2, 1, 1000, 1)
make_path(.03, 2, 1, 1000, 1)
make_path(.03, 2, 1, 1000, 1)
make_path(.03, 2, 1, 1000, 1)
make_path(.03, 2, 1, 1000, 1)
make_path(.03, 2, 1, 1000, 1)
make_path(.03, 2, 1, 1000, 1)
make_path(.03, 2, 1, 1000, 1)
make_path(.03, 2, 1, 1000, 1)
make_path(.03, 2, 1, 1000, 1)
make_path(.03, 2, 1, 1000, 1)
make_path(.03, 2, 1, 1000, 1)
make_path(.03, 2, 1, 1000, 1)
make_path(.03, 2, 1, 1000, 1)
make_path(.03, 2, 1, 1000, 1)
make_path(.03, 2, 1, 1000, 1)
make_path(.03, 2, 1, 1000, 1)
plot(x = make_path(.03, 2, 1, 1000, 1), Geom.histogram)
plot(x = make_path(.03, 2, 1, 1000, 1), Geom.histogram)
using Distributions
TruncatedNormal(.1)
TruncatedNormal(.1, 1)
TruncatedNormal(.1, 1, 0, Inf)
d = TruncatedNormal(.1, 1, 0, Inf)
rand(d, 100)
mean(rand(d, 1000))
mean(rand(d, 1000))
d = TruncatedNormal(.5, 1, 0, Inf)
mean(rand(d, 1000))
d = TruncatedNormal(2.5, 1, 0, Inf)
mean(rand(d, 1000))
mean(d)
d = TruncatedNormal(.5, 1, 0, Inf)
mean(d)
Normal(.5, 1, 0, Inf)
Normal(.5, 1)
cdf(Normal(.5, 1))
cdf(Normal(.5, 1), 0)
 1- cdf(Normal(.5, 1), 0)
 1- cdf(Normal(.5, 1), 0) * mean(d)
 1- cdf(Normal(.5, 1), 0) * mean(TruncatedNormal(.5, 1, 0, Inf))
 1- cdf(Normal(mu, sigma), 0) * mean(TruncatedNormal(mu, sigma, 0, Inf))
mu = .5
sigma = 1
 1- cdf(Normal(mu, sigma), 0) * mean(TruncatedNormal(mu, sigma, 0, Inf))
mu = .2
 1- cdf(Normal(mu, sigma), 0) * mean(TruncatedNormal(mu, sigma, 0, Inf))
mu = 0
 1- cdf(Normal(mu, sigma), 0) * mean(TruncatedNormal(mu, sigma, 0, Inf))
 (1- cdf(Normal(mu, sigma), 0)) * mean(TruncatedNormal(mu, sigma, 0, Inf))
mu = 0
mu = .2
 (1- cdf(Normal(mu, sigma), 0)) * mean(TruncatedNormal(mu, sigma, 0, Inf))
mu = 1
 (1- cdf(Normal(mu, sigma), 0)) * mean(TruncatedNormal(mu, sigma, 0, Inf))
mu = 1.2
 (1- cdf(Normal(mu, sigma), 0)) * mean(TruncatedNormal(mu, sigma, 0, Inf))
mu = .05
 (1- cdf(Normal(mu, sigma), 0)) * mean(TruncatedNormal(mu, sigma, 0, Inf))
mu = -.5
 (1- cdf(Normal(mu, sigma), 0)) * mean(TruncatedNormal(mu, sigma, 0, Inf))
set_default_plot_size(9inch, 7inch)
d
d.x1
d[x1]
d['x1']
d["x1"]
df[:x1]
d[:x1]
d[:x1, :x2]
zip(d[x1], d[x2])
zip(d[:x1], d[:x2])
zip(d[:x1], d[:x2])[0]
zip(d[:x1], d[:x2])[1]
[a for (a,b) in zip(d[:x1], d[:x2])]
[[a,b] * [1,-1] for (a,b) in zip(d[:x1], d[:x2])]
[1,1]
[1,1] * [2,3]
[1,1]' * [2,3]
[[a,b]' * [1,-1] for (a,b) in zip(d[:x1], d[:x2])]
d
[[a,b] for (a,b) in zip(d[:x1], d[:x2])]
[[a,b]' * [1,-1] for (a,b) in zip(d[:x1], d[:x2])]
[[a,b]' * [1,1] for (a,b) in zip(d[:x1], d[:x2])]
[[a,b]' * [1,1.2] for (a,b) in zip(d[:x1], d[:x2])]
sum(abs([[a,b]' * [1,1.2] for (a,b) in zip(d[:x1], d[:x2])]))
sum([abs([a,b]' * [1,1.2]) for (a,b) in zip(d[:x1], d[:x2])])
sum([abs([a,b]' * [1,1]) for (a,b) in zip(d[:x1], d[:x2])])
sum([abs([a,b]' * [1,.8]) for (a,b) in zip(d[:x1], d[:x2])])
sum([abs([a,b]' * [1,.1.1]) for (a,b) in zip(d[:x1], d[:x2])])
sum([abs([a,b]' * [1,1.1]) for (a,b) in zip(d[:x1], d[:x2])])
sum([abs([a,b]' * [1,1.02]) for (a,b) in zip(d[:x1], d[:x2])])
sum([abs([a,b]' * [1,1]) for (a,b) in zip(d[:x1], d[:x2])])
sum([abs([a,b]' * [1,.9]) for (a,b) in zip(d[:x1], d[:x2])])
sum([abs([a,b]' * [1,.7]) for (a,b) in zip(d[:x1], d[:x2])])
sum([abs([a,b]' * [1,.3]) for (a,b) in zip(d[:x1], d[:x2])])
sum([abs([a,b]' * [1,.1]) for (a,b) in zip(d[:x1], d[:x2])])
sum([abs([a,b]' * [1,1]) for (a,b) in zip(d[:x1], d[:x2])])
norm(1,1)
norm([1,1])
normalize
?normalize
sum([abs([a,b]' * normalize([1,1])) for (a,b) in zip(d[:x1], d[:x2])])
sum([abs([a,b]' * normalize([1,.5])) for (a,b) in zip(d[:x1], d[:x2])])
sum([abs([a,b]' * normalize([1,.1])) for (a,b) in zip(d[:x1], d[:x2])])
sum([abs([a,b]' * normalize([1,1.2])) for (a,b) in zip(d[:x1], d[:x2])])
sum([abs([a,b]' * normalize([1,1.8])) for (a,b) in zip(d[:x1], d[:x2])])
sum([abs([a,b]' * normalize([1,1])) for (a,b) in zip(d[:x1], d[:x2])])
sum([abs([a,b]' * normalize([1,2])) for (a,b) in zip(d[:x1], d[:x2])])
sum([abs([a,b]' * normalize([1,1.5])) for (a,b) in zip(d[:x1], d[:x2])])
sum([abs([a,b]' * normalize([1,1.4])) for (a,b) in zip(d[:x1], d[:x2])])
sum([abs([a,b]' * normalize([1,1.3])) for (a,b) in zip(d[:x1], d[:x2])])
sum([abs([a,b]' * normalize([1,1.25])) for (a,b) in zip(d[:x1], d[:x2])])
sum([abs([a,b]' * normalize([1,1.2])) for (a,b) in zip(d[:x1], d[:x2])])
sum([abs([a,b]' * normalize([1,1.15])) for (a,b) in zip(d[:x1], d[:x2])])
sum([abs([a,b]' * normalize([1,1.1])) for (a,b) in zip(d[:x1], d[:x2])])
sum([abs([a,b]' * normalize([1,1.15])) for (a,b) in zip(d[:x1], d[:x2])])
sum([abs(normalize([1,1.15])' * [a,b]) for (a,b) in zip(d[:x1], d[:x2])])
[abs(normalize([1,1.15])' * [a,b]) for (a,b) in zip(d[:x1], d[:x2])]
minimum([abs(normalize([1,1.15])' * [a,b]) for (a,b) in zip(d[:x1], d[:x2])])
[1,2]' * [2,3]
Int([1,2]' * [2,3])
Float64([1,2]' * [2,3])
a = [1,2]' * [2,3]
a
a[1]
a[1] a[1]
[a[1], a[1]]
[a, a]
minimum([abs(normalize([1,1.15])' * [a,b])[0] for (a,b) in zip(d[:x1], d[:x2])])
minimum([abs(normalize([1,1.15])' * [a,b])[1] for (a,b) in zip(d[:x1], d[:x2])])
minimum([abs(normalize([1,1.1])' * [a,b])[1] for (a,b) in zip(d[:x1], d[:x2])])
minimum([abs(normalize([1,1])' * [a,b])[1] for (a,b) in zip(d[:x1], d[:x2])])
minimum([abs(normalize([1,1.2])' * [a,b])[1] for (a,b) in zip(d[:x1], d[:x2])])
minimum([abs(normalize([1,1.15])' * [a,b])[1] for (a,b) in zip(d[:x1], d[:x2])])
[abs(normalize([1,1.15])' * [a,b])[1] for (a,b) in zip(d[:x1], d[:x2])]
[abs(normalize([1,1.15])' * [a,b] + 1)[1] for (a,b) in zip(d[:x1], d[:x2])]
[abs(normalize([1,1.15])' * [a,b] + .2)[1] for (a,b) in zip(d[:x1], d[:x2])]
minimum([abs(normalize([1,1.15])' * [a,b] + .2)[1] for (a,b) in zip(d[:x1], d[:x2])])
minimum([abs(normalize([1,1.15])' * [a,b] + .1)[1] for (a,b) in zip(d[:x1], d[:x2])])
minimum([abs(normalize([1,1.15])' * [a,b] + .3)[1] for (a,b) in zip(d[:x1], d[:x2])])
minimum([abs(normalize([1,1.15])' * [a,b] + .25)[1] for (a,b) in zip(d[:x1], d[:x2])])
minimum([abs(normalize([1,1.15])' * [a,b] + .22)[1] for (a,b) in zip(d[:x1], d[:x2])])
minimum([abs(normalize([1,1.15])' * [a,b] + .18)[1] for (a,b) in zip(d[:x1], d[:x2])])
minimum([abs(normalize([1,1.15])' * [a,b] + .1)[1] for (a,b) in zip(d[:x1], d[:x2])])
minimum([abs(normalize([1,1.15])' * [a,b] + .2)[1] for (a,b) in zip(d[:x1], d[:x2])])
minimum([abs(normalize([1,1.10])' * [a,b] + .2)[1] for (a,b) in zip(d[:x1], d[:x2])])
minimum([abs(normalize([1,1.2])' * [a,b] + .2)[1] for (a,b) in zip(d[:x1], d[:x2])])
[abs(normalize([1,1.2])' * [a,b] + .2)[1] for (a,b) in zip(d[:x1], d[:x2])]
[abs(normalize([1,1.2])' * [a,b] - .2)[1] for (a,b) in zip(d[:x1], d[:x2])]
[abs(normalize([1,1.2])' * [a,b] + .2)[1] for (a,b) in zip(d[:x1], d[:x2])]
filter([abs(normalize([1,1.2])' * [a,b] + .2)[1] for (a,b) in zip(d[:x1], d[:x2])])
filter(x -> x < 1.5, [abs(normalize([1,1.2])' * [a,b] + .2)[1] for (a,b) in zip(d[:x1], d[:x2])])
d
d[15]
d[15,]
d[15,:]
d[8,:]
[d[8,:] ; d[15,:]]
cos
cos(90)
cos(0)
cos(180)
sin(0)
sin(90)
sin(180)
sin(.5)
sin(1)
sin(0)
sin(.25)
?sin
radian
sin(90)
cos(1.57)
cos(0)
[1 1]
[1, 1]
concat([1, 1], [2,2])
append!([1, 1], [2,2])
rep(1, 4)
repeat(1, 4)
fill(1, 4)
zeros
ones
zeros(5)
[1, 1]
ones(3)
generate_data(5)
    mean_a = zeros(d)
mean_a = zeros(5)
MvNormal(mean_a)
cov(MvNormal(mean_a))
var(MvNormal(mean_a))
rand(MvNormal(mean_a), 100)
rand(MvNormal(mean_a, 1), 100)
cov(MvNormal(mean_a, 1))
    d_a = MvNormal(mean_a, 1)
    rand(d_a, 10)
    rand(d_a, 50)
rand(d_a, 50)
rand(d_a, 50)'
[rand(d_a, 50) rand(d_b, 50)]
[rand(d_a, 50) rand(d_a, 50)]
[rand(d_a, 50)' ones(50)]
rand(d_a, 50)
generate_distributions(100)
generate_distributions(10)
generate_distributions(10)
entropy
entropy
?entropy
entropy([1,1,1,3])
entropy([0,0,1])
targets = [0,0,1,1]
length([t for t in targets if t == 1])
length([t for t in targets if t == 1])/length(t)
length([t for t in targets if t == 1])/length(targets)
?log
log(2, 8)
log(8)
unique([0,1,1])
?count
log(2,1)
log(2, 1.1)
Dict
Dict(:a =>2)
d = Dict(:a =>2)
d[:a]
y = [1,2,3]
x = [3,4,5]
[x for (x,y) in zip(x,y)]
[x for x = x, y = y]
(1,2)
(1,2)[1]
(1,2)[2]
(1,2)[3]
sort
?sort
sort(zip(x,y))
sort(zip(x,y), t -> t[1])
sort(zip(x,y), lt = t -> t[1])
sort(collect(zip(x,y)), lt = t -> t[1])
[x y]
sort([x y])
sort([x y], 1)
[rev(x) y]
x = [5,3,2]
sort([x y], 1)
[x y]
sort([x y], 1)
y = [1,3,2]
sort([x y], 1)
[x y]
sort([x y], by = t -> t[1])
sort([x y], by = t -> t[,1])
sort([x y], by = t -> t[:,1])
sort(zip(x, y), by = t -> t[,1])
sort(zip(x, y), by = t -> t[1])
sort(collect(zip(x, y)), by = t -> t[1])
a,b = [1,2]
a
b
d
d[:b] = 3
d
d[:a] = 2
d
d[:a] = 1
d
merge
merge(d, Dict(:a => 6))
d
merge(d, Dict(:a => 6))
d + Dict(:a => 6)
last
prev
?reduce
 Dict(:a => 4, :b => 0)
merge(Dict(:a => 3), Dict(:a => 2))
append!([1,2], 3)
append!([Dict(:a => 1)], 3)
append!([Dict(:a => 1)], Dict(:b => 2))
[Dict(:a => 1)]
append!([Dict(:a => 1)], Dict(:a => 2))
append!([Dict(:a => 1)], [Dict(:a => 2)])
sum(d)
sum(values(d))
d
(a,b) -> a + b
x
x[1:2]
x[2:end]
x[3:end]
3:end
zip(x,y)
zip(x,y)[1]
[[1,2,3], 1]
hcat([1,2,3], 1)
hcat([1,2,3], [1])
vcat([1,2,3], [1])
plot_asian(.05, 1.5, 1, 1000, 1)
plot_asian(.05, 1.5, 1, 1000, 1)
plot_asian(.05, 1.5, 1, 1000, 1)
plot_asian(.05, 1.5, 1, 1000, 1)
plot_asian(.05, 1.5, 1, 1000, 1)
path_and_price(.05, 1.5, 1, 1000, 1)
path_and_price(.05, 1.5, 1, 1000, 1)
path_and_price(.05, 1.5, 1, 1000, 1)
path_and_price(.05, 1.5, 1, 1000, 1)
path_and_price(.05, 1.5, 1, 1000, 1)
path_and_price(.05, 1.5, 1, 1000, 1)
path_and_price(.05, 1.5, 1, 1000, 1)
path_and_price(.05, 1.5, 1, 1000, 1)
path_and_price(.05, 1.5, 1, 1000, 1)
plot_asian(.05, 1.5, 1, 1000, 1)
plot_asian(.05, 1.5, 1, 1000, 1)
plot_asian(.05, 1.5, 1, 1000, 1)
plot_asian(.05, 1.5, 1, 1000, 1)
plot_asian(.05, 1.5, 1, 1000, 1)
plot_asian(.05, 1.5, 1, 1000, 1)
plot_asian(.05, 1.5, 1, 1000, 1)
plot_asian(.05, 1.5, 1, 1000, 1)
plot_asian(.05, 1.5, 1, 1000, 1)
plot_asian(.05, 1.5, 1, 1000, 1)
exp(1.1)
exp(.03)
plot_asian(.05, 1.5, 1, 1000, 1)
plot_asian(.05, 1.5, 1, 1000, 1)
plot_asian(.05, 1.5, 1, 1000, 1)
plot_asian(.05, 1.5, 1, 1000, 1)
plot_asian(.05, 1.5, 1, 1000, 1)
plot_asian(.05, 1.5, 1, 1000, 1)
plot_asian(.05, 1.5, 1, 1000, 1)
plot_asian(.05, 1.5, 1, 1000, 1)
plot_asian(.05, 1.5, 1, 1000, 1)
using Weave
weave("problemset.jnw", doctype="tex")
weave("problemset.jnw", doctype="tex")
weave("problemset.jnw", doctype="tex")
weave("problemset.jnw", doctype="tex")
weave("problemset.jnw", doctype="tex")
path
var(path)
var(log(path))
var(log(path))
get_sigma(1000,1,1.5,1)
get_sigma(1000,1,1.5,2)
get_sigma(1000,1,1.5,3)
get_sigma(1000,1,1.5,4)
get_sigma(1000,1,1.5,3)
get_sigma(1000,1,1.5,3)
get_sigma(1000,1,1.5,3)
get_sigma(1000,1,1.5,3)
get_sigma(1000,1,1.5,3)
get_sigma(1000,1,1.5,3)
get_sigma(1000,1,1.5,3)
get_sigma(1000,1,1.5,3)
get_sigma(1000,1,1.5,3)
get_sigma(1000,1,1.5,3)
get_sigma(1000,1,1.5,4)
get_sigma(1000,1,1.5,2)
get_sigma(1000,1,1.5,2)
get_sigma(1000,1,1.5,1)
get_sigma(1000,1,1.5,.5)
LogNormal
fit(LogNormal())
fit(LogNormal(), [1,2,3])
fit(LogNormal, [1,2,3])
get_sigma(1000,1,1.5,.5)
get_sigma_ln(1000,1,1,1.5)
get_sigma(1000,1,1,1.5)
get_sigma_ln(1000,1,1,1.5)
get_sigma_ln(1000,1,1,1.5)
get_sigma_ln(1000,1,1,1.5)
get_sigma_ln(1000,1,1,1.5)
get_sigma_ln(1000,1,1,1.5)
get_sigma_ln(1000,1,1,1.5)
get_sigma_ln(1000,1,1,1.5)
get_sigma_ln(2000,2,1,1.5)
x = randn(5)
y = randn(5)
x'*t
x'*y
norm
norm(x)
sqrt(x'*x)
norm(x)
norm(y)
a = randn(5)
b = randn(5)
x'*y * a'' * b
x'*y * a' * b
x'*y * b'*a
x'*b * y'*a
x'*y * b'*a
b'*y * x'*a
x'*y * a'*b
x'*y + a'*b
a'*y + x'*b
